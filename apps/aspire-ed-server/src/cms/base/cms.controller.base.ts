/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CmsService } from "../cms.service";
import { CmsCreateInput } from "./CmsCreateInput";
import { Cms } from "./Cms";
import { CmsFindManyArgs } from "./CmsFindManyArgs";
import { CmsWhereUniqueInput } from "./CmsWhereUniqueInput";
import { CmsUpdateInput } from "./CmsUpdateInput";

export class CmsControllerBase {
  constructor(protected readonly service: CmsService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Cms })
  async createCms(@common.Body() data: CmsCreateInput): Promise<Cms> {
    return await this.service.createCms({
      data: data,
      select: {
        content: true,
        createdAt: true,
        id: true,
        pageTitle: true,
        published: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Cms] })
  @ApiNestedQuery(CmsFindManyArgs)
  async cmsItems(@common.Req() request: Request): Promise<Cms[]> {
    const args = plainToClass(CmsFindManyArgs, request.query);
    return this.service.cmsItems({
      ...args,
      select: {
        content: true,
        createdAt: true,
        id: true,
        pageTitle: true,
        published: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Cms })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async cms(@common.Param() params: CmsWhereUniqueInput): Promise<Cms | null> {
    const result = await this.service.cms({
      where: params,
      select: {
        content: true,
        createdAt: true,
        id: true,
        pageTitle: true,
        published: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Cms })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCms(
    @common.Param() params: CmsWhereUniqueInput,
    @common.Body() data: CmsUpdateInput
  ): Promise<Cms | null> {
    try {
      return await this.service.updateCms({
        where: params,
        data: data,
        select: {
          content: true,
          createdAt: true,
          id: true,
          pageTitle: true,
          published: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Cms })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCms(
    @common.Param() params: CmsWhereUniqueInput
  ): Promise<Cms | null> {
    try {
      return await this.service.deleteCms({
        where: params,
        select: {
          content: true,
          createdAt: true,
          id: true,
          pageTitle: true,
          published: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
