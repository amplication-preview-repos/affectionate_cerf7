/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Cms } from "./Cms";
import { CmsCountArgs } from "./CmsCountArgs";
import { CmsFindManyArgs } from "./CmsFindManyArgs";
import { CmsFindUniqueArgs } from "./CmsFindUniqueArgs";
import { CreateCmsArgs } from "./CreateCmsArgs";
import { UpdateCmsArgs } from "./UpdateCmsArgs";
import { DeleteCmsArgs } from "./DeleteCmsArgs";
import { CmsService } from "../cms.service";
@graphql.Resolver(() => Cms)
export class CmsResolverBase {
  constructor(protected readonly service: CmsService) {}

  async _cmsItemsMeta(
    @graphql.Args() args: CmsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Cms])
  async cmsItems(@graphql.Args() args: CmsFindManyArgs): Promise<Cms[]> {
    return this.service.cmsItems(args);
  }

  @graphql.Query(() => Cms, { nullable: true })
  async cms(@graphql.Args() args: CmsFindUniqueArgs): Promise<Cms | null> {
    const result = await this.service.cms(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Cms)
  async createCms(@graphql.Args() args: CreateCmsArgs): Promise<Cms> {
    return await this.service.createCms({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Cms)
  async updateCms(@graphql.Args() args: UpdateCmsArgs): Promise<Cms | null> {
    try {
      return await this.service.updateCms({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Cms)
  async deleteCms(@graphql.Args() args: DeleteCmsArgs): Promise<Cms | null> {
    try {
      return await this.service.deleteCms(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
