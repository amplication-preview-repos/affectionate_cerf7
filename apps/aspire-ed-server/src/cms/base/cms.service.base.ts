/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Cms as PrismaCms } from "@prisma/client";

export class CmsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.CmsCountArgs, "select">): Promise<number> {
    return this.prisma.cms.count(args);
  }

  async cmsItems<T extends Prisma.CmsFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.CmsFindManyArgs>
  ): Promise<PrismaCms[]> {
    return this.prisma.cms.findMany<Prisma.CmsFindManyArgs>(args);
  }
  async cms<T extends Prisma.CmsFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.CmsFindUniqueArgs>
  ): Promise<PrismaCms | null> {
    return this.prisma.cms.findUnique(args);
  }
  async createCms<T extends Prisma.CmsCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CmsCreateArgs>
  ): Promise<PrismaCms> {
    return this.prisma.cms.create<T>(args);
  }
  async updateCms<T extends Prisma.CmsUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CmsUpdateArgs>
  ): Promise<PrismaCms> {
    return this.prisma.cms.update<T>(args);
  }
  async deleteCms<T extends Prisma.CmsDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.CmsDeleteArgs>
  ): Promise<PrismaCms> {
    return this.prisma.cms.delete(args);
  }
}
